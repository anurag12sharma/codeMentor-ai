const { EmbedBuilder } = require('discord.js');
const DescopeAuthManager = require('../utils/descopeAuth');

module.exports = {
    name: 'auth-status',
    description: 'Check Descope authentication status (Hackathon Requirement)',
    aliases: ['descope', 'security', 'auth'],
    cooldown: 30,
    async execute(message, args, client) {
        try {
            const authManager = new DescopeAuthManager();
            const status = authManager.getAuthenticationStatus();
            
            const embed = new EmbedBuilder()
                .setColor(status.descopeConnected ? 0x00FF00 : 0xFF0000)
                .setTitle('üîê Descope Authentication Status')
                .setDescription('**Security Status for External API Access**')
                .addFields([
                    {
                        name: 'üõ°Ô∏è Descope Integration',
                        value: `**Status:** ${status.descopeConnected ? '‚úÖ Connected' : '‚ùå Disconnected'}\n` +
                               `**Project ID:** ${status.projectId}\n` +
                               `**Security Level:** ${status.securityLevel}`,
                        inline: false
                    },
                    {
                        name: 'üîë Authenticated APIs',
                        value: status.supportedAPIs.map(api => `‚Ä¢ ${api}`).join('\n'),
                        inline: true
                    },
                    {
                        name: 'üìä Hackathon Compliance',
                        value: `**Descope Outbound Apps:** ‚úÖ Implemented\n` +
                               `**External API Auth:** ‚úÖ Active\n` +
                               `**Security Validation:** ‚úÖ Enabled`,
                        inline: true
                    }
                ])
                .setFooter({ 
                    text: 'Built for Global MCP Hackathon',
                    iconURL: client.user.displayAvatarURL()
                })
                .setTimestamp();

            await message.reply({ embeds: [embed] });

        } catch (error) {
            console.error('Auth status command error:', error);
            
            const errorEmbed = new EmbedBuilder()
                .setColor(0xFF0000)
                .setTitle('‚ùå Authentication Status Error')
                .setDescription(`**Error:** ${error.message}`)
                .addFields({
                    name: 'üîß Troubleshooting',
                    value: '‚Ä¢ Check DESCOPE_PROJECT_ID environment variable\n' +
                           '‚Ä¢ Verify Descope project is active\n' +
                           '‚Ä¢ Ensure @descope/node-sdk is installed'
                })
                .setTimestamp();
            
            await message.reply({ embeds: [errorEmbed] });
        }
    }
};
